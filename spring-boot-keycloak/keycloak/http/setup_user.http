# Get admin user access token
POST http://localhost:8085/realms/master/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=password&client_id=admin-cli&username=admin&password=admin

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.test("Access token exists", function() {
        client.assert(response.body.hasOwnProperty("access_token"), "Response property 'access_token' does not exists");
    });

    client.global.set("access_token", response.body.access_token);
    client.log("Access token is " + response.body.access_token)
%}

###

# Add new user larmic (pw: test)
# NOTE: groups can not be automatically applied (even if the documentary says so)
#       see https://github.com/keycloak/keycloak/issues/13390
POST http://localhost:8085/admin/realms/spring-boot-services/users
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
    "firstName": "Lars",
    "lastName": "Michaelis",
    "enabled": "true",
    "username": "larmic",
    "credentials": [{
        "type":"password",
        "value":"test",
        "temporary":false
    }]
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 201, "Response status is not 200");
    });

    client.global.set("user_larmic_location", response.headers.valueOf("Location"));
    client.log(response.headers.valueOf("Location"))
%}

###

# Get larmic user id
GET {{user_larmic_location}}
Authorization: Bearer {{access_token}}
Content-Type: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.test("id", function() {
        client.assert(response.body.hasOwnProperty("id"), "Response property 'id' does not exists");
    });

    client.global.set("user_larmic_id", response.body.id);
    client.log("User larmic id is " + response.body.id)
%}

###

# Get spring-boot-service-1 client id
GET http://localhost:8085/admin/realms/spring-boot-services/clients?clientId=spring-boot-service-1
Authorization: Bearer {{access_token}}
Content-Type: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.test("id", function() {
        client.assert(response.body[0].hasOwnProperty("id"), "Response property 'id' does not exists");
    });

    client.global.set("client_id", response.body[0].id);
    client.log("Client id is " + response.body[0].id)
%}

###

# Add roles to larmic
POST http://localhost:8085/admin/realms/spring-boot-services/users/{{user_larmic_id}}/role-mappings/clients/{{client_id}}
Authorization: Bearer {{access_token}}
Content-Type: application/json

[
    {
        "name":"custom-realm-role",
        "composite":true,
        "clientRole":false
    }
]

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 201, "Response status is not 200");
    });
%}

###
